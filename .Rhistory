install.packages("broom")
library("broom", lib.loc="~/R/win-library/3.1")
data(mtcars)
a<-anova(lm(mpg~wt+qsec+disp, mtcars))
b<-tidy(a)
View(b)
View(a)
c<-aov(mpq~wt+qsec+disp, mtcars)
c<-aov(mpg~wt+qsec+disp, mtcars)
d<-tidy(c)
View(d)
c
?aov
?anova
?transform
install.packages(c("BH", "boot", "BradleyTerry2", "broom", "car", "caret", "class", "clue", "cluster", "coda", "codetools", "colorspace", "CORElearn", "devtools", "digest", "dplyr", "evaluate", "forecast", "foreign", "formatR", "Formula", "gbm", "gdata", "genalg", "ggplot2", "gtools", "highr", "Hmisc", "httr", "intergraph", "jsonlite", "KernSmooth", "knitr", "lattice", "lazyeval", "lmom", "magrittr", "manipulate", "markdown", "markovchain", "MASS", "Matrix", "mcmcplots", "mgcv", "mime", "network", "nlme", "NLP", "nnet", "plyr", "psych", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reshape2", "rmarkdown", "RMySQL", "rpart", "rstudioapi", "RWeka", "RWekajars", "sfsmisc", "shiny", "sjPlot", "spatial", "stringr", "survival", "timeDate", "tm", "tseries", "zoo"))
library(ggplot2)
diamonds$is_expensive <- diamonds$price > 2400
is_test <- runif(nrow(diamonds)) > 0.75
train <- diamonds[is_test==FALSE,]
test <- diamonds[is_test==TRUE,]
summary(fit <- glm(is_expensive ~ carat + cut + clarity, data=train))
library(ROCR)
prob <- predict(fit, newdata=test, type="response")
pred <- prediction(prob, test$is_expensive)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
install.packages("ROCR")
library(ROCR)
prob <- predict(fit, newdata=test, type="response")
pred <- prediction(prob, test$is_expensive)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
auc <- performance(pred, measure = "auc")
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="GLM")
View(roc.data)
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="GLM")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
library(ggplot2)
diamonds$is_expensive <- diamonds$price > 2400
is_test <- runif(nrow(diamonds)) > 0.75
train <- diamonds[is_test==FALSE,]
test <- diamonds[is_test==TRUE,]
summary(fit <- glm(is_expensive ~ carat + cut + clarity, data=train))
library(ROCR)
prob <- predict(fit, newdata=test, type="response")
pred <- prediction(prob, test$is_expensive)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
# I know, the following code is bizarre. Just go with it.
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="GLM")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
#### Environment setup ####
# Load packages.
packages <- c("ggplot2", "igraph","sna", "graph")
packages <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
install.packages("rstan")
?rstan
library("rstan", lib.loc="~/R/win-library/3.2")
?rstan
install.packages(c("Rcpp", "rstan"))
install.packages(c("ggplot2", "Hmisc"))
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
options(contrasts = c("contr.treatment", "contr.poly"))
library(MASS)
example(birthwt)
(bwt.mu <- multinom(low ~ ., bwt))
install.packages(c("BH", "digest", "Rcpp", "rstan", "StanHeaders"))
install.packages("GDELTtools")
test.filter <- list(ActionGeo_ADM1Code=c("NI", "US"), ActionGeo_CountryCode="US")
test.results <- GetGDELT(start.date="1979-01-01", end.date="1979-12-31",
filter=test.filter)
table(test.results$ActionGeo_ADM1Code)
table(test.results$ActionGeo_CountryCode)
library("GDELTtools", lib.loc="~/R/win-library/3.2")
test.filter <- list(ActionGeo_ADM1Code=c("NI", "US"), ActionGeo_CountryCode="US")
test.results <- GetGDELT(start.date="1979-01-01", end.date="1979-12-31",
filter=test.filter)
table(test.results$ActionGeo_ADM1Code)
table(test.results$ActionGeo_CountryCode)
View(test.results)
GetGDELT(start.date = "2016/01/01",
end.date = "2016/01/17",
data.url.root = "http://data.gdeltproject.org/events/",
verbose = TRUE)
GDelta2016<-GetGDELT(start.date = "2016/01/01",
end.date = "2016/01/17",
data.url.root = "http://data.gdeltproject.org/events/",
verbose = TRUE)
?GetGDELT
##
library(GDELTtools)
GDelta2016<-GetGDELT(start.date = "2016/01/01",
end.date = "2016/01/16",
data.url.root = "http://data.gdeltproject.org/events/",
verbose = TRUE)
library(plyr)
library(data.table)
GDelta2016DT<-as.data.table(GDelta2016)
GDelta2016DT$data<-as.Date(GDelta2016DT$SQLDATE, '%Y%m%d')
GDelta2016DT$data<-as.Date(as.char(GDelta2016DT$SQLDATE), '%Y%m%d')
GDelta2016DT$data<-as.Date(as.character(GDelta2016DT$SQLDATE), '%Y%m%d')
GDelt2016DT<-data.table(GDelta2016)
GDelta2016DT<-NULL
GDelt2016DT<-data.table(GDelta2016)
GDelta2016<-NULL
GDeltEventsByDay<-GDelt2016[,list(events = length(GDelt2016DT)), by=list(SQLDATE)]
GDeltEventsByDay<-GDelt2016DT[,list(events = length(GDelt2016DT)), by=list(SQLDATE)]
View(GDeltEventsByDay)
length(GDelt2016DT)
dim(GDelt2016DT)
GDeltEventsByDay<-GDelt2016DT[,list(events = dim(GDelt2016DT)[[1]]), by=list(SQLDATE)]
?count
GDeltEventsByDay<-GDelt2016DT[,list(events = count(GLOBALEVENTID)), by=list(SQLDATE)]
count(GDelt2016DT, vars=c("GLOBALEVENTID", "SQLDATE"))
count(GDelt2016DT, vars=c("SQLDATE"))
EventsByDay<-count(GDelt2016DT, vars=c("SQLDATE"))
plot(EventsByDay)
##
library(GDELTtools)
library(plyr)
library(data.table)
GDelt2016<-data.table(GetGDELT(start.date = "2015/01/01",
end.date = "2016/01/16",
data.url.root = "http://data.gdeltproject.org/events/",
verbose = TRUE))
EventsByDay<-count(GDelt2016DT, vars=c("SQLDATE"))
EventsByDay<-count(GDelt2016DT, vars=c("SQLDATE"))
##
library(GDELTtools)
library(plyr)
library(data.table)
GDelt2016<-data.table(GetGDELT(start.date = "2015/12/01",
end.date = "2016/01/16",
data.url.root = "http://data.gdeltproject.org/events/",
verbose = TRUE))
EventsByDay<-count(GDelt2016DT, vars=c("SQLDATE"))
GDelt2016<-data.table(GetGDELT(start.date = "2015/12/20",
end.date = "2016/01/16",
data.url.root = "http://data.gdeltproject.org/events/",
verbose = TRUE))
EventsByDay<-count(GDelt2016, vars=c("SQLDATE"))
##
library(GDELTtools)
library(plyr)
library(data.table)
GDelt2016<-data.table(GetGDELT(start.date = "2016/1/1",
end.date = "2016/01/16",
data.url.root = "http://data.gdeltproject.org/events/",
verbose = TRUE))
EventsByDay<-count(GDelt2016, vars=c("SQLDATE"))
?memory.size
memory.size()
size(GDelta2016)
?size
## Environment setup
# Load packages.
packages <- c("gdata", "ggplot2", "Rfacebook")
packages <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
# Set working directory
workingdir<-paste("C:\\Users", Sys.getenv("USERNAME"), "Documents\\GitHub\\FacebookAnal", sep = "\\")
setwd(workingdir)
fb_oauth<-fbOAuth(app_id = "181179668581917", app_secret = "e0cde13f4793d1c12c43cab1ef002887")
fb_oauth<-fbOAuth(app_id = "1741558606079821", app_secret = "ceb350bde30f092e2d60ead2ac964cbe")
fb_oauth<-fbOAuth(app_id = "1741558606079821", app_secret = "ceb350bde30f092e2d60ead2ac964cbe")
install.packages(c("knitr", "latticeExtra", "munsell", "R6", "RcppEigen", "rstan", "xtable"))
# Set working directory
workingdir<-paste("C:\\Users", Sys.getenv("USERNAME"), "Documents\\GitHub\\FacebookAnal", sep = "\\")
setwd(workingdir)
fb_oauth<-fbOAuth(app_id = "1741558606079821", app_secret = "ceb350bde30f092e2d60ead2ac964cbe")
save(fb_oauth, file="fb_oauth")
load("fb_oauth")
me<-getUsers("me", token=fb_oauth)
me$username
## Environment setup
# Load packages.
packages <- c("gdata", "ggplot2", "Rfacebook")
packages <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
# Set working directory
workingdir<-paste("C:\\Users", Sys.getenv("USERNAME"), "Documents\\GitHub\\FacebookAnal", sep = "\\")
setwd(workingdir)
fb_oauth<-fbOAuth(app_id = "1741558606079821", app_secret = "ceb350bde30f092e2d60ead2ac964cbe")
